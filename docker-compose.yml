services:
  web:
    build: .
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=PathPrefix(`/`)"
      - "traefik.http.services.web.loadbalancer.server.port=80"
      - "traefik.http.routers.web.entrypoints=web"
    networks:
      - app_net
    secrets:
      - postgres_password
    volumes:
      - ./public:/var/www/html
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: mydb
    secrets:
      - postgres_password
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  traefik:
    image: traefik:v3
    command:
      - "--providers.docker=true"
      - "--api.dashboard=true"
      - "--entrypoints.web.address=:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=PathPrefix(`/dashboard`) || PathPrefix(`/api`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=web"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
    ports:
      - "80:80"
    volumes:
      - ./config/traefik.yml:/etc/traefik/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app_net
    extra_hosts:
      - "traefik.local:127.0.0.1"
    healthcheck:
      test: ["CMD", "nc", "-z", "traefik.local", "80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app_net:
    driver: bridge

volumes:
  db_data: {}

secrets:
  postgres_password:
    file: ./config/postgres_password
